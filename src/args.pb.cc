// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: args.proto

#include "args.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_args_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogEntry_args_2eproto;
class RequestVoteArgsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestVoteArgs> _instance;
} _RequestVoteArgs_default_instance_;
class RequestVoteReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestVoteReply> _instance;
} _RequestVoteReply_default_instance_;
class LogEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogEntry> _instance;
} _LogEntry_default_instance_;
class AppendEntriesArgsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppendEntriesArgs> _instance;
} _AppendEntriesArgs_default_instance_;
class AppendEntriesReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppendEntriesReply> _instance;
} _AppendEntriesReply_default_instance_;
static void InitDefaultsscc_info_AppendEntriesArgs_args_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AppendEntriesArgs_default_instance_;
    new (ptr) ::AppendEntriesArgs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AppendEntriesArgs::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AppendEntriesArgs_args_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AppendEntriesArgs_args_2eproto}, {
      &scc_info_LogEntry_args_2eproto.base,}};

static void InitDefaultsscc_info_AppendEntriesReply_args_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AppendEntriesReply_default_instance_;
    new (ptr) ::AppendEntriesReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AppendEntriesReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppendEntriesReply_args_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AppendEntriesReply_args_2eproto}, {}};

static void InitDefaultsscc_info_LogEntry_args_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LogEntry_default_instance_;
    new (ptr) ::LogEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LogEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogEntry_args_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogEntry_args_2eproto}, {}};

static void InitDefaultsscc_info_RequestVoteArgs_args_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RequestVoteArgs_default_instance_;
    new (ptr) ::RequestVoteArgs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RequestVoteArgs::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestVoteArgs_args_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RequestVoteArgs_args_2eproto}, {}};

static void InitDefaultsscc_info_RequestVoteReply_args_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RequestVoteReply_default_instance_;
    new (ptr) ::RequestVoteReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RequestVoteReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestVoteReply_args_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RequestVoteReply_args_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_args_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_args_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_args_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_args_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::RequestVoteArgs, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RequestVoteArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RequestVoteArgs, term_),
  PROTOBUF_FIELD_OFFSET(::RequestVoteArgs, candidate_id_),
  PROTOBUF_FIELD_OFFSET(::RequestVoteArgs, last_log_index_),
  PROTOBUF_FIELD_OFFSET(::RequestVoteArgs, last_log_term_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::RequestVoteReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RequestVoteReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RequestVoteReply, term_),
  PROTOBUF_FIELD_OFFSET(::RequestVoteReply, vote_granted_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::LogEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::LogEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LogEntry, term_),
  PROTOBUF_FIELD_OFFSET(::LogEntry, index_),
  PROTOBUF_FIELD_OFFSET(::LogEntry, command_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::AppendEntriesArgs, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::AppendEntriesArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AppendEntriesArgs, term_),
  PROTOBUF_FIELD_OFFSET(::AppendEntriesArgs, leader_id_),
  PROTOBUF_FIELD_OFFSET(::AppendEntriesArgs, prev_log_index_),
  PROTOBUF_FIELD_OFFSET(::AppendEntriesArgs, prev_log_term_),
  PROTOBUF_FIELD_OFFSET(::AppendEntriesArgs, entries_),
  PROTOBUF_FIELD_OFFSET(::AppendEntriesArgs, leader_commit_),
  0,
  1,
  2,
  3,
  ~0u,
  4,
  PROTOBUF_FIELD_OFFSET(::AppendEntriesReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::AppendEntriesReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AppendEntriesReply, term_),
  PROTOBUF_FIELD_OFFSET(::AppendEntriesReply, success_),
  PROTOBUF_FIELD_OFFSET(::AppendEntriesReply, conflict_index_),
  PROTOBUF_FIELD_OFFSET(::AppendEntriesReply, conflict_term_),
  0,
  1,
  2,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::RequestVoteArgs)},
  { 13, 20, sizeof(::RequestVoteReply)},
  { 22, 30, sizeof(::LogEntry)},
  { 33, 44, sizeof(::AppendEntriesArgs)},
  { 50, 59, sizeof(::AppendEntriesReply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RequestVoteArgs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RequestVoteReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LogEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AppendEntriesArgs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AppendEntriesReply_default_instance_),
};

const char descriptor_table_protodef_args_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nargs.proto\"d\n\017RequestVoteArgs\022\014\n\004term\030"
  "\001 \002(\r\022\024\n\014candidate_id\030\002 \002(\005\022\026\n\016last_log_"
  "index\030\003 \002(\r\022\025\n\rlast_log_term\030\004 \002(\r\"6\n\020Re"
  "questVoteReply\022\014\n\004term\030\001 \002(\r\022\024\n\014vote_gra"
  "nted\030\002 \002(\010\"8\n\010LogEntry\022\014\n\004term\030\001 \002(\r\022\r\n\005"
  "index\030\002 \002(\r\022\017\n\007command\030\003 \002(\014\"\226\001\n\021AppendE"
  "ntriesArgs\022\014\n\004term\030\001 \002(\r\022\021\n\tleader_id\030\002 "
  "\002(\005\022\026\n\016prev_log_index\030\003 \002(\r\022\025\n\rprev_log_"
  "term\030\004 \002(\r\022\032\n\007entries\030\005 \003(\0132\t.LogEntry\022\025"
  "\n\rleader_commit\030\006 \002(\r\"b\n\022AppendEntriesRe"
  "ply\022\014\n\004term\030\001 \002(\r\022\017\n\007success\030\002 \002(\010\022\026\n\016co"
  "nflict_index\030\003 \002(\r\022\025\n\rconflict_term\030\004 \002("
  "\r"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_args_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_args_2eproto_sccs[5] = {
  &scc_info_AppendEntriesArgs_args_2eproto.base,
  &scc_info_AppendEntriesReply_args_2eproto.base,
  &scc_info_LogEntry_args_2eproto.base,
  &scc_info_RequestVoteArgs_args_2eproto.base,
  &scc_info_RequestVoteReply_args_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_args_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_args_2eproto = {
  false, false, descriptor_table_protodef_args_2eproto, "args.proto", 481,
  &descriptor_table_args_2eproto_once, descriptor_table_args_2eproto_sccs, descriptor_table_args_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_args_2eproto::offsets,
  file_level_metadata_args_2eproto, 5, file_level_enum_descriptors_args_2eproto, file_level_service_descriptors_args_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_args_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_args_2eproto)), true);

// ===================================================================

void RequestVoteArgs::InitAsDefaultInstance() {
}
class RequestVoteArgs::_Internal {
 public:
  using HasBits = decltype(std::declval<RequestVoteArgs>()._has_bits_);
  static void set_has_term(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_candidate_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_last_log_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_last_log_term(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

RequestVoteArgs::RequestVoteArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RequestVoteArgs)
}
RequestVoteArgs::RequestVoteArgs(const RequestVoteArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_log_term_) -
    reinterpret_cast<char*>(&term_)) + sizeof(last_log_term_));
  // @@protoc_insertion_point(copy_constructor:RequestVoteArgs)
}

void RequestVoteArgs::SharedCtor() {
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_log_term_) -
      reinterpret_cast<char*>(&term_)) + sizeof(last_log_term_));
}

RequestVoteArgs::~RequestVoteArgs() {
  // @@protoc_insertion_point(destructor:RequestVoteArgs)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RequestVoteArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RequestVoteArgs::ArenaDtor(void* object) {
  RequestVoteArgs* _this = reinterpret_cast< RequestVoteArgs* >(object);
  (void)_this;
}
void RequestVoteArgs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestVoteArgs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestVoteArgs& RequestVoteArgs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestVoteArgs_args_2eproto.base);
  return *internal_default_instance();
}


void RequestVoteArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:RequestVoteArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&term_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_log_term_) -
        reinterpret_cast<char*>(&term_)) + sizeof(last_log_term_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestVoteArgs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_term(&has_bits);
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 candidate_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_candidate_id(&has_bits);
          candidate_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 last_log_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_last_log_index(&has_bits);
          last_log_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 last_log_term = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_last_log_term(&has_bits);
          last_log_term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestVoteArgs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RequestVoteArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 term = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_term(), target);
  }

  // required int32 candidate_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_candidate_id(), target);
  }

  // required uint32 last_log_index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_last_log_index(), target);
  }

  // required uint32 last_log_term = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_last_log_term(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RequestVoteArgs)
  return target;
}

size_t RequestVoteArgs::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RequestVoteArgs)
  size_t total_size = 0;

  if (_internal_has_term()) {
    // required uint32 term = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_term());
  }

  if (_internal_has_candidate_id()) {
    // required int32 candidate_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_candidate_id());
  }

  if (_internal_has_last_log_index()) {
    // required uint32 last_log_index = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_last_log_index());
  }

  if (_internal_has_last_log_term()) {
    // required uint32 last_log_term = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_last_log_term());
  }

  return total_size;
}
size_t RequestVoteArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RequestVoteArgs)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 term = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_term());

    // required int32 candidate_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_candidate_id());

    // required uint32 last_log_index = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_last_log_index());

    // required uint32 last_log_term = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_last_log_term());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestVoteArgs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RequestVoteArgs)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestVoteArgs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestVoteArgs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RequestVoteArgs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RequestVoteArgs)
    MergeFrom(*source);
  }
}

void RequestVoteArgs::MergeFrom(const RequestVoteArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RequestVoteArgs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      term_ = from.term_;
    }
    if (cached_has_bits & 0x00000002u) {
      candidate_id_ = from.candidate_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      last_log_index_ = from.last_log_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      last_log_term_ = from.last_log_term_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RequestVoteArgs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RequestVoteArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestVoteArgs::CopyFrom(const RequestVoteArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RequestVoteArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestVoteArgs::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void RequestVoteArgs::InternalSwap(RequestVoteArgs* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestVoteArgs, last_log_term_)
      + sizeof(RequestVoteArgs::last_log_term_)
      - PROTOBUF_FIELD_OFFSET(RequestVoteArgs, term_)>(
          reinterpret_cast<char*>(&term_),
          reinterpret_cast<char*>(&other->term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestVoteArgs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RequestVoteReply::InitAsDefaultInstance() {
}
class RequestVoteReply::_Internal {
 public:
  using HasBits = decltype(std::declval<RequestVoteReply>()._has_bits_);
  static void set_has_term(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vote_granted(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

RequestVoteReply::RequestVoteReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RequestVoteReply)
}
RequestVoteReply::RequestVoteReply(const RequestVoteReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&vote_granted_) -
    reinterpret_cast<char*>(&term_)) + sizeof(vote_granted_));
  // @@protoc_insertion_point(copy_constructor:RequestVoteReply)
}

void RequestVoteReply::SharedCtor() {
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vote_granted_) -
      reinterpret_cast<char*>(&term_)) + sizeof(vote_granted_));
}

RequestVoteReply::~RequestVoteReply() {
  // @@protoc_insertion_point(destructor:RequestVoteReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RequestVoteReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RequestVoteReply::ArenaDtor(void* object) {
  RequestVoteReply* _this = reinterpret_cast< RequestVoteReply* >(object);
  (void)_this;
}
void RequestVoteReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestVoteReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestVoteReply& RequestVoteReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestVoteReply_args_2eproto.base);
  return *internal_default_instance();
}


void RequestVoteReply::Clear() {
// @@protoc_insertion_point(message_clear_start:RequestVoteReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&term_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vote_granted_) -
        reinterpret_cast<char*>(&term_)) + sizeof(vote_granted_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestVoteReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_term(&has_bits);
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool vote_granted = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_vote_granted(&has_bits);
          vote_granted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestVoteReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RequestVoteReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 term = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_term(), target);
  }

  // required bool vote_granted = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_vote_granted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RequestVoteReply)
  return target;
}

size_t RequestVoteReply::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RequestVoteReply)
  size_t total_size = 0;

  if (_internal_has_term()) {
    // required uint32 term = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_term());
  }

  if (_internal_has_vote_granted()) {
    // required bool vote_granted = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t RequestVoteReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RequestVoteReply)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 term = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_term());

    // required bool vote_granted = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestVoteReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RequestVoteReply)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestVoteReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestVoteReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RequestVoteReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RequestVoteReply)
    MergeFrom(*source);
  }
}

void RequestVoteReply::MergeFrom(const RequestVoteReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RequestVoteReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      term_ = from.term_;
    }
    if (cached_has_bits & 0x00000002u) {
      vote_granted_ = from.vote_granted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RequestVoteReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RequestVoteReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestVoteReply::CopyFrom(const RequestVoteReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RequestVoteReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestVoteReply::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void RequestVoteReply::InternalSwap(RequestVoteReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestVoteReply, vote_granted_)
      + sizeof(RequestVoteReply::vote_granted_)
      - PROTOBUF_FIELD_OFFSET(RequestVoteReply, term_)>(
          reinterpret_cast<char*>(&term_),
          reinterpret_cast<char*>(&other->term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestVoteReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogEntry::InitAsDefaultInstance() {
}
class LogEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<LogEntry>()._has_bits_);
  static void set_has_term(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_command(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

LogEntry::LogEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LogEntry)
}
LogEntry::LogEntry(const LogEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_command()) {
    command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_command(),
      GetArena());
  }
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&term_)) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:LogEntry)
}

void LogEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogEntry_args_2eproto.base);
  command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&term_)) + sizeof(index_));
}

LogEntry::~LogEntry() {
  // @@protoc_insertion_point(destructor:LogEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  command_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LogEntry::ArenaDtor(void* object) {
  LogEntry* _this = reinterpret_cast< LogEntry* >(object);
  (void)_this;
}
void LogEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogEntry& LogEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogEntry_args_2eproto.base);
  return *internal_default_instance();
}


void LogEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:LogEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    command_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&term_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&index_) -
        reinterpret_cast<char*>(&term_)) + sizeof(index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_term(&has_bits);
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_index(&has_bits);
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes command = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_command();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 term = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_term(), target);
  }

  // required uint32 index = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_index(), target);
  }

  // required bytes command = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_command(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogEntry)
  return target;
}

size_t LogEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:LogEntry)
  size_t total_size = 0;

  if (_internal_has_command()) {
    // required bytes command = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_command());
  }

  if (_internal_has_term()) {
    // required uint32 term = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_term());
  }

  if (_internal_has_index()) {
    // required uint32 index = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index());
  }

  return total_size;
}
size_t LogEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LogEntry)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bytes command = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_command());

    // required uint32 term = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_term());

    // required uint32 index = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LogEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const LogEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LogEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LogEntry)
    MergeFrom(*source);
  }
}

void LogEntry::MergeFrom(const LogEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LogEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_command(from._internal_command());
    }
    if (cached_has_bits & 0x00000002u) {
      term_ = from.term_;
    }
    if (cached_has_bits & 0x00000004u) {
      index_ = from.index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LogEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogEntry::CopyFrom(const LogEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void LogEntry::InternalSwap(LogEntry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  command_.Swap(&other->command_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogEntry, index_)
      + sizeof(LogEntry::index_)
      - PROTOBUF_FIELD_OFFSET(LogEntry, term_)>(
          reinterpret_cast<char*>(&term_),
          reinterpret_cast<char*>(&other->term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppendEntriesArgs::InitAsDefaultInstance() {
}
class AppendEntriesArgs::_Internal {
 public:
  using HasBits = decltype(std::declval<AppendEntriesArgs>()._has_bits_);
  static void set_has_term(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_leader_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_prev_log_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_prev_log_term(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_leader_commit(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

AppendEntriesArgs::AppendEntriesArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  entries_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AppendEntriesArgs)
}
AppendEntriesArgs::AppendEntriesArgs(const AppendEntriesArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&leader_commit_) -
    reinterpret_cast<char*>(&term_)) + sizeof(leader_commit_));
  // @@protoc_insertion_point(copy_constructor:AppendEntriesArgs)
}

void AppendEntriesArgs::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppendEntriesArgs_args_2eproto.base);
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leader_commit_) -
      reinterpret_cast<char*>(&term_)) + sizeof(leader_commit_));
}

AppendEntriesArgs::~AppendEntriesArgs() {
  // @@protoc_insertion_point(destructor:AppendEntriesArgs)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppendEntriesArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AppendEntriesArgs::ArenaDtor(void* object) {
  AppendEntriesArgs* _this = reinterpret_cast< AppendEntriesArgs* >(object);
  (void)_this;
}
void AppendEntriesArgs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppendEntriesArgs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppendEntriesArgs& AppendEntriesArgs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppendEntriesArgs_args_2eproto.base);
  return *internal_default_instance();
}


void AppendEntriesArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:AppendEntriesArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&term_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&leader_commit_) -
        reinterpret_cast<char*>(&term_)) + sizeof(leader_commit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppendEntriesArgs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_term(&has_bits);
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 leader_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_leader_id(&has_bits);
          leader_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 prev_log_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_prev_log_index(&has_bits);
          prev_log_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 prev_log_term = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_prev_log_term(&has_bits);
          prev_log_term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .LogEntry entries = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // required uint32 leader_commit = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_leader_commit(&has_bits);
          leader_commit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppendEntriesArgs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AppendEntriesArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 term = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_term(), target);
  }

  // required int32 leader_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_leader_id(), target);
  }

  // required uint32 prev_log_index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_prev_log_index(), target);
  }

  // required uint32 prev_log_term = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_prev_log_term(), target);
  }

  // repeated .LogEntry entries = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_entries(i), target, stream);
  }

  // required uint32 leader_commit = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_leader_commit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AppendEntriesArgs)
  return target;
}

size_t AppendEntriesArgs::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AppendEntriesArgs)
  size_t total_size = 0;

  if (_internal_has_term()) {
    // required uint32 term = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_term());
  }

  if (_internal_has_leader_id()) {
    // required int32 leader_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_leader_id());
  }

  if (_internal_has_prev_log_index()) {
    // required uint32 prev_log_index = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_prev_log_index());
  }

  if (_internal_has_prev_log_term()) {
    // required uint32 prev_log_term = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_prev_log_term());
  }

  if (_internal_has_leader_commit()) {
    // required uint32 leader_commit = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_leader_commit());
  }

  return total_size;
}
size_t AppendEntriesArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AppendEntriesArgs)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required uint32 term = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_term());

    // required int32 leader_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_leader_id());

    // required uint32 prev_log_index = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_prev_log_index());

    // required uint32 prev_log_term = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_prev_log_term());

    // required uint32 leader_commit = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_leader_commit());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .LogEntry entries = 5;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppendEntriesArgs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AppendEntriesArgs)
  GOOGLE_DCHECK_NE(&from, this);
  const AppendEntriesArgs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppendEntriesArgs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AppendEntriesArgs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AppendEntriesArgs)
    MergeFrom(*source);
  }
}

void AppendEntriesArgs::MergeFrom(const AppendEntriesArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AppendEntriesArgs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      term_ = from.term_;
    }
    if (cached_has_bits & 0x00000002u) {
      leader_id_ = from.leader_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      prev_log_index_ = from.prev_log_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      prev_log_term_ = from.prev_log_term_;
    }
    if (cached_has_bits & 0x00000010u) {
      leader_commit_ = from.leader_commit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AppendEntriesArgs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AppendEntriesArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendEntriesArgs::CopyFrom(const AppendEntriesArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AppendEntriesArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntriesArgs::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(entries_)) return false;
  return true;
}

void AppendEntriesArgs::InternalSwap(AppendEntriesArgs* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  entries_.InternalSwap(&other->entries_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppendEntriesArgs, leader_commit_)
      + sizeof(AppendEntriesArgs::leader_commit_)
      - PROTOBUF_FIELD_OFFSET(AppendEntriesArgs, term_)>(
          reinterpret_cast<char*>(&term_),
          reinterpret_cast<char*>(&other->term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppendEntriesArgs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppendEntriesReply::InitAsDefaultInstance() {
}
class AppendEntriesReply::_Internal {
 public:
  using HasBits = decltype(std::declval<AppendEntriesReply>()._has_bits_);
  static void set_has_term(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_conflict_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_conflict_term(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

AppendEntriesReply::AppendEntriesReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AppendEntriesReply)
}
AppendEntriesReply::AppendEntriesReply(const AppendEntriesReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&conflict_term_) -
    reinterpret_cast<char*>(&term_)) + sizeof(conflict_term_));
  // @@protoc_insertion_point(copy_constructor:AppendEntriesReply)
}

void AppendEntriesReply::SharedCtor() {
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&conflict_term_) -
      reinterpret_cast<char*>(&term_)) + sizeof(conflict_term_));
}

AppendEntriesReply::~AppendEntriesReply() {
  // @@protoc_insertion_point(destructor:AppendEntriesReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppendEntriesReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AppendEntriesReply::ArenaDtor(void* object) {
  AppendEntriesReply* _this = reinterpret_cast< AppendEntriesReply* >(object);
  (void)_this;
}
void AppendEntriesReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppendEntriesReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppendEntriesReply& AppendEntriesReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppendEntriesReply_args_2eproto.base);
  return *internal_default_instance();
}


void AppendEntriesReply::Clear() {
// @@protoc_insertion_point(message_clear_start:AppendEntriesReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&term_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&conflict_term_) -
        reinterpret_cast<char*>(&term_)) + sizeof(conflict_term_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppendEntriesReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_term(&has_bits);
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_success(&has_bits);
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 conflict_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_conflict_index(&has_bits);
          conflict_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 conflict_term = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_conflict_term(&has_bits);
          conflict_term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppendEntriesReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AppendEntriesReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 term = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_term(), target);
  }

  // required bool success = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  // required uint32 conflict_index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_conflict_index(), target);
  }

  // required uint32 conflict_term = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_conflict_term(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AppendEntriesReply)
  return target;
}

size_t AppendEntriesReply::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AppendEntriesReply)
  size_t total_size = 0;

  if (_internal_has_term()) {
    // required uint32 term = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_term());
  }

  if (_internal_has_success()) {
    // required bool success = 2;
    total_size += 1 + 1;
  }

  if (_internal_has_conflict_index()) {
    // required uint32 conflict_index = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_conflict_index());
  }

  if (_internal_has_conflict_term()) {
    // required uint32 conflict_term = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_conflict_term());
  }

  return total_size;
}
size_t AppendEntriesReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AppendEntriesReply)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 term = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_term());

    // required bool success = 2;
    total_size += 1 + 1;

    // required uint32 conflict_index = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_conflict_index());

    // required uint32 conflict_term = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_conflict_term());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppendEntriesReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AppendEntriesReply)
  GOOGLE_DCHECK_NE(&from, this);
  const AppendEntriesReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppendEntriesReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AppendEntriesReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AppendEntriesReply)
    MergeFrom(*source);
  }
}

void AppendEntriesReply::MergeFrom(const AppendEntriesReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AppendEntriesReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      term_ = from.term_;
    }
    if (cached_has_bits & 0x00000002u) {
      success_ = from.success_;
    }
    if (cached_has_bits & 0x00000004u) {
      conflict_index_ = from.conflict_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      conflict_term_ = from.conflict_term_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AppendEntriesReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AppendEntriesReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendEntriesReply::CopyFrom(const AppendEntriesReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AppendEntriesReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntriesReply::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AppendEntriesReply::InternalSwap(AppendEntriesReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppendEntriesReply, conflict_term_)
      + sizeof(AppendEntriesReply::conflict_term_)
      - PROTOBUF_FIELD_OFFSET(AppendEntriesReply, term_)>(
          reinterpret_cast<char*>(&term_),
          reinterpret_cast<char*>(&other->term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppendEntriesReply::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::RequestVoteArgs* Arena::CreateMaybeMessage< ::RequestVoteArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RequestVoteArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::RequestVoteReply* Arena::CreateMaybeMessage< ::RequestVoteReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RequestVoteReply >(arena);
}
template<> PROTOBUF_NOINLINE ::LogEntry* Arena::CreateMaybeMessage< ::LogEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LogEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::AppendEntriesArgs* Arena::CreateMaybeMessage< ::AppendEntriesArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AppendEntriesArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::AppendEntriesReply* Arena::CreateMaybeMessage< ::AppendEntriesReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AppendEntriesReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
