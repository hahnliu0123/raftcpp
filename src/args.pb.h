// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: args.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_args_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_args_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_args_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_args_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_args_2eproto;
class AppendEntriesArgs;
class AppendEntriesArgsDefaultTypeInternal;
extern AppendEntriesArgsDefaultTypeInternal _AppendEntriesArgs_default_instance_;
class AppendEntriesReply;
class AppendEntriesReplyDefaultTypeInternal;
extern AppendEntriesReplyDefaultTypeInternal _AppendEntriesReply_default_instance_;
class LogEntry;
class LogEntryDefaultTypeInternal;
extern LogEntryDefaultTypeInternal _LogEntry_default_instance_;
class RequestVoteArgs;
class RequestVoteArgsDefaultTypeInternal;
extern RequestVoteArgsDefaultTypeInternal _RequestVoteArgs_default_instance_;
class RequestVoteReply;
class RequestVoteReplyDefaultTypeInternal;
extern RequestVoteReplyDefaultTypeInternal _RequestVoteReply_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AppendEntriesArgs* Arena::CreateMaybeMessage<::AppendEntriesArgs>(Arena*);
template<> ::AppendEntriesReply* Arena::CreateMaybeMessage<::AppendEntriesReply>(Arena*);
template<> ::LogEntry* Arena::CreateMaybeMessage<::LogEntry>(Arena*);
template<> ::RequestVoteArgs* Arena::CreateMaybeMessage<::RequestVoteArgs>(Arena*);
template<> ::RequestVoteReply* Arena::CreateMaybeMessage<::RequestVoteReply>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class RequestVoteArgs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RequestVoteArgs) */ {
 public:
  inline RequestVoteArgs() : RequestVoteArgs(nullptr) {}
  virtual ~RequestVoteArgs();

  RequestVoteArgs(const RequestVoteArgs& from);
  RequestVoteArgs(RequestVoteArgs&& from) noexcept
    : RequestVoteArgs() {
    *this = ::std::move(from);
  }

  inline RequestVoteArgs& operator=(const RequestVoteArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestVoteArgs& operator=(RequestVoteArgs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestVoteArgs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestVoteArgs* internal_default_instance() {
    return reinterpret_cast<const RequestVoteArgs*>(
               &_RequestVoteArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RequestVoteArgs& a, RequestVoteArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestVoteArgs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestVoteArgs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestVoteArgs* New() const final {
    return CreateMaybeMessage<RequestVoteArgs>(nullptr);
  }

  RequestVoteArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestVoteArgs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestVoteArgs& from);
  void MergeFrom(const RequestVoteArgs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestVoteArgs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RequestVoteArgs";
  }
  protected:
  explicit RequestVoteArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_args_2eproto);
    return ::descriptor_table_args_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermFieldNumber = 1,
    kCandidateIdFieldNumber = 2,
    kLastLogIndexFieldNumber = 3,
    kLastLogTermFieldNumber = 4,
  };
  // required uint32 term = 1;
  bool has_term() const;
  private:
  bool _internal_has_term() const;
  public:
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::uint32 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required int32 candidate_id = 2;
  bool has_candidate_id() const;
  private:
  bool _internal_has_candidate_id() const;
  public:
  void clear_candidate_id();
  ::PROTOBUF_NAMESPACE_ID::int32 candidate_id() const;
  void set_candidate_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_candidate_id() const;
  void _internal_set_candidate_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required uint32 last_log_index = 3;
  bool has_last_log_index() const;
  private:
  bool _internal_has_last_log_index() const;
  public:
  void clear_last_log_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 last_log_index() const;
  void set_last_log_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_last_log_index() const;
  void _internal_set_last_log_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 last_log_term = 4;
  bool has_last_log_term() const;
  private:
  bool _internal_has_last_log_term() const;
  public:
  void clear_last_log_term();
  ::PROTOBUF_NAMESPACE_ID::uint32 last_log_term() const;
  void set_last_log_term(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_last_log_term() const;
  void _internal_set_last_log_term(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:RequestVoteArgs)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 term_;
  ::PROTOBUF_NAMESPACE_ID::int32 candidate_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 last_log_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 last_log_term_;
  friend struct ::TableStruct_args_2eproto;
};
// -------------------------------------------------------------------

class RequestVoteReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RequestVoteReply) */ {
 public:
  inline RequestVoteReply() : RequestVoteReply(nullptr) {}
  virtual ~RequestVoteReply();

  RequestVoteReply(const RequestVoteReply& from);
  RequestVoteReply(RequestVoteReply&& from) noexcept
    : RequestVoteReply() {
    *this = ::std::move(from);
  }

  inline RequestVoteReply& operator=(const RequestVoteReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestVoteReply& operator=(RequestVoteReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestVoteReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestVoteReply* internal_default_instance() {
    return reinterpret_cast<const RequestVoteReply*>(
               &_RequestVoteReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RequestVoteReply& a, RequestVoteReply& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestVoteReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestVoteReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestVoteReply* New() const final {
    return CreateMaybeMessage<RequestVoteReply>(nullptr);
  }

  RequestVoteReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestVoteReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestVoteReply& from);
  void MergeFrom(const RequestVoteReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestVoteReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RequestVoteReply";
  }
  protected:
  explicit RequestVoteReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_args_2eproto);
    return ::descriptor_table_args_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermFieldNumber = 1,
    kVoteGrantedFieldNumber = 2,
  };
  // required uint32 term = 1;
  bool has_term() const;
  private:
  bool _internal_has_term() const;
  public:
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::uint32 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required bool vote_granted = 2;
  bool has_vote_granted() const;
  private:
  bool _internal_has_vote_granted() const;
  public:
  void clear_vote_granted();
  bool vote_granted() const;
  void set_vote_granted(bool value);
  private:
  bool _internal_vote_granted() const;
  void _internal_set_vote_granted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:RequestVoteReply)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 term_;
  bool vote_granted_;
  friend struct ::TableStruct_args_2eproto;
};
// -------------------------------------------------------------------

class LogEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LogEntry) */ {
 public:
  inline LogEntry() : LogEntry(nullptr) {}
  virtual ~LogEntry();

  LogEntry(const LogEntry& from);
  LogEntry(LogEntry&& from) noexcept
    : LogEntry() {
    *this = ::std::move(from);
  }

  inline LogEntry& operator=(const LogEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogEntry& operator=(LogEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogEntry* internal_default_instance() {
    return reinterpret_cast<const LogEntry*>(
               &_LogEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LogEntry& a, LogEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(LogEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogEntry* New() const final {
    return CreateMaybeMessage<LogEntry>(nullptr);
  }

  LogEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogEntry& from);
  void MergeFrom(const LogEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LogEntry";
  }
  protected:
  explicit LogEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_args_2eproto);
    return ::descriptor_table_args_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 3,
    kTermFieldNumber = 1,
    kIndexFieldNumber = 2,
  };
  // required bytes command = 3;
  bool has_command() const;
  private:
  bool _internal_has_command() const;
  public:
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const void* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // required uint32 term = 1;
  bool has_term() const;
  private:
  bool _internal_has_term() const;
  public:
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::uint32 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 index = 2;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:LogEntry)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::uint32 term_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_;
  friend struct ::TableStruct_args_2eproto;
};
// -------------------------------------------------------------------

class AppendEntriesArgs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AppendEntriesArgs) */ {
 public:
  inline AppendEntriesArgs() : AppendEntriesArgs(nullptr) {}
  virtual ~AppendEntriesArgs();

  AppendEntriesArgs(const AppendEntriesArgs& from);
  AppendEntriesArgs(AppendEntriesArgs&& from) noexcept
    : AppendEntriesArgs() {
    *this = ::std::move(from);
  }

  inline AppendEntriesArgs& operator=(const AppendEntriesArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppendEntriesArgs& operator=(AppendEntriesArgs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppendEntriesArgs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppendEntriesArgs* internal_default_instance() {
    return reinterpret_cast<const AppendEntriesArgs*>(
               &_AppendEntriesArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AppendEntriesArgs& a, AppendEntriesArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(AppendEntriesArgs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppendEntriesArgs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppendEntriesArgs* New() const final {
    return CreateMaybeMessage<AppendEntriesArgs>(nullptr);
  }

  AppendEntriesArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppendEntriesArgs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppendEntriesArgs& from);
  void MergeFrom(const AppendEntriesArgs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppendEntriesArgs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AppendEntriesArgs";
  }
  protected:
  explicit AppendEntriesArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_args_2eproto);
    return ::descriptor_table_args_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 5,
    kTermFieldNumber = 1,
    kLeaderIdFieldNumber = 2,
    kPrevLogIndexFieldNumber = 3,
    kPrevLogTermFieldNumber = 4,
    kLeaderCommitFieldNumber = 6,
  };
  // repeated .LogEntry entries = 5;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::LogEntry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogEntry >*
      mutable_entries();
  private:
  const ::LogEntry& _internal_entries(int index) const;
  ::LogEntry* _internal_add_entries();
  public:
  const ::LogEntry& entries(int index) const;
  ::LogEntry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogEntry >&
      entries() const;

  // required uint32 term = 1;
  bool has_term() const;
  private:
  bool _internal_has_term() const;
  public:
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::uint32 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required int32 leader_id = 2;
  bool has_leader_id() const;
  private:
  bool _internal_has_leader_id() const;
  public:
  void clear_leader_id();
  ::PROTOBUF_NAMESPACE_ID::int32 leader_id() const;
  void set_leader_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_leader_id() const;
  void _internal_set_leader_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required uint32 prev_log_index = 3;
  bool has_prev_log_index() const;
  private:
  bool _internal_has_prev_log_index() const;
  public:
  void clear_prev_log_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 prev_log_index() const;
  void set_prev_log_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_prev_log_index() const;
  void _internal_set_prev_log_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 prev_log_term = 4;
  bool has_prev_log_term() const;
  private:
  bool _internal_has_prev_log_term() const;
  public:
  void clear_prev_log_term();
  ::PROTOBUF_NAMESPACE_ID::uint32 prev_log_term() const;
  void set_prev_log_term(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_prev_log_term() const;
  void _internal_set_prev_log_term(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 leader_commit = 6;
  bool has_leader_commit() const;
  private:
  bool _internal_has_leader_commit() const;
  public:
  void clear_leader_commit();
  ::PROTOBUF_NAMESPACE_ID::uint32 leader_commit() const;
  void set_leader_commit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_leader_commit() const;
  void _internal_set_leader_commit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:AppendEntriesArgs)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogEntry > entries_;
  ::PROTOBUF_NAMESPACE_ID::uint32 term_;
  ::PROTOBUF_NAMESPACE_ID::int32 leader_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prev_log_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prev_log_term_;
  ::PROTOBUF_NAMESPACE_ID::uint32 leader_commit_;
  friend struct ::TableStruct_args_2eproto;
};
// -------------------------------------------------------------------

class AppendEntriesReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AppendEntriesReply) */ {
 public:
  inline AppendEntriesReply() : AppendEntriesReply(nullptr) {}
  virtual ~AppendEntriesReply();

  AppendEntriesReply(const AppendEntriesReply& from);
  AppendEntriesReply(AppendEntriesReply&& from) noexcept
    : AppendEntriesReply() {
    *this = ::std::move(from);
  }

  inline AppendEntriesReply& operator=(const AppendEntriesReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppendEntriesReply& operator=(AppendEntriesReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppendEntriesReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppendEntriesReply* internal_default_instance() {
    return reinterpret_cast<const AppendEntriesReply*>(
               &_AppendEntriesReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AppendEntriesReply& a, AppendEntriesReply& b) {
    a.Swap(&b);
  }
  inline void Swap(AppendEntriesReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppendEntriesReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppendEntriesReply* New() const final {
    return CreateMaybeMessage<AppendEntriesReply>(nullptr);
  }

  AppendEntriesReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppendEntriesReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppendEntriesReply& from);
  void MergeFrom(const AppendEntriesReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppendEntriesReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AppendEntriesReply";
  }
  protected:
  explicit AppendEntriesReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_args_2eproto);
    return ::descriptor_table_args_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermFieldNumber = 1,
    kSuccessFieldNumber = 2,
    kConflictIndexFieldNumber = 3,
    kConflictTermFieldNumber = 4,
  };
  // required uint32 term = 1;
  bool has_term() const;
  private:
  bool _internal_has_term() const;
  public:
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::uint32 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required bool success = 2;
  bool has_success() const;
  private:
  bool _internal_has_success() const;
  public:
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // required uint32 conflict_index = 3;
  bool has_conflict_index() const;
  private:
  bool _internal_has_conflict_index() const;
  public:
  void clear_conflict_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 conflict_index() const;
  void set_conflict_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_conflict_index() const;
  void _internal_set_conflict_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 conflict_term = 4;
  bool has_conflict_term() const;
  private:
  bool _internal_has_conflict_term() const;
  public:
  void clear_conflict_term();
  ::PROTOBUF_NAMESPACE_ID::uint32 conflict_term() const;
  void set_conflict_term(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_conflict_term() const;
  void _internal_set_conflict_term(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:AppendEntriesReply)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 term_;
  bool success_;
  ::PROTOBUF_NAMESPACE_ID::uint32 conflict_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 conflict_term_;
  friend struct ::TableStruct_args_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RequestVoteArgs

// required uint32 term = 1;
inline bool RequestVoteArgs::_internal_has_term() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RequestVoteArgs::has_term() const {
  return _internal_has_term();
}
inline void RequestVoteArgs::clear_term() {
  term_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RequestVoteArgs::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RequestVoteArgs::term() const {
  // @@protoc_insertion_point(field_get:RequestVoteArgs.term)
  return _internal_term();
}
inline void RequestVoteArgs::_internal_set_term(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  term_ = value;
}
inline void RequestVoteArgs::set_term(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:RequestVoteArgs.term)
}

// required int32 candidate_id = 2;
inline bool RequestVoteArgs::_internal_has_candidate_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RequestVoteArgs::has_candidate_id() const {
  return _internal_has_candidate_id();
}
inline void RequestVoteArgs::clear_candidate_id() {
  candidate_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestVoteArgs::_internal_candidate_id() const {
  return candidate_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestVoteArgs::candidate_id() const {
  // @@protoc_insertion_point(field_get:RequestVoteArgs.candidate_id)
  return _internal_candidate_id();
}
inline void RequestVoteArgs::_internal_set_candidate_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  candidate_id_ = value;
}
inline void RequestVoteArgs::set_candidate_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_candidate_id(value);
  // @@protoc_insertion_point(field_set:RequestVoteArgs.candidate_id)
}

// required uint32 last_log_index = 3;
inline bool RequestVoteArgs::_internal_has_last_log_index() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RequestVoteArgs::has_last_log_index() const {
  return _internal_has_last_log_index();
}
inline void RequestVoteArgs::clear_last_log_index() {
  last_log_index_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RequestVoteArgs::_internal_last_log_index() const {
  return last_log_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RequestVoteArgs::last_log_index() const {
  // @@protoc_insertion_point(field_get:RequestVoteArgs.last_log_index)
  return _internal_last_log_index();
}
inline void RequestVoteArgs::_internal_set_last_log_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  last_log_index_ = value;
}
inline void RequestVoteArgs::set_last_log_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_last_log_index(value);
  // @@protoc_insertion_point(field_set:RequestVoteArgs.last_log_index)
}

// required uint32 last_log_term = 4;
inline bool RequestVoteArgs::_internal_has_last_log_term() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RequestVoteArgs::has_last_log_term() const {
  return _internal_has_last_log_term();
}
inline void RequestVoteArgs::clear_last_log_term() {
  last_log_term_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RequestVoteArgs::_internal_last_log_term() const {
  return last_log_term_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RequestVoteArgs::last_log_term() const {
  // @@protoc_insertion_point(field_get:RequestVoteArgs.last_log_term)
  return _internal_last_log_term();
}
inline void RequestVoteArgs::_internal_set_last_log_term(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  last_log_term_ = value;
}
inline void RequestVoteArgs::set_last_log_term(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_last_log_term(value);
  // @@protoc_insertion_point(field_set:RequestVoteArgs.last_log_term)
}

// -------------------------------------------------------------------

// RequestVoteReply

// required uint32 term = 1;
inline bool RequestVoteReply::_internal_has_term() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RequestVoteReply::has_term() const {
  return _internal_has_term();
}
inline void RequestVoteReply::clear_term() {
  term_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RequestVoteReply::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RequestVoteReply::term() const {
  // @@protoc_insertion_point(field_get:RequestVoteReply.term)
  return _internal_term();
}
inline void RequestVoteReply::_internal_set_term(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  term_ = value;
}
inline void RequestVoteReply::set_term(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:RequestVoteReply.term)
}

// required bool vote_granted = 2;
inline bool RequestVoteReply::_internal_has_vote_granted() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RequestVoteReply::has_vote_granted() const {
  return _internal_has_vote_granted();
}
inline void RequestVoteReply::clear_vote_granted() {
  vote_granted_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool RequestVoteReply::_internal_vote_granted() const {
  return vote_granted_;
}
inline bool RequestVoteReply::vote_granted() const {
  // @@protoc_insertion_point(field_get:RequestVoteReply.vote_granted)
  return _internal_vote_granted();
}
inline void RequestVoteReply::_internal_set_vote_granted(bool value) {
  _has_bits_[0] |= 0x00000002u;
  vote_granted_ = value;
}
inline void RequestVoteReply::set_vote_granted(bool value) {
  _internal_set_vote_granted(value);
  // @@protoc_insertion_point(field_set:RequestVoteReply.vote_granted)
}

// -------------------------------------------------------------------

// LogEntry

// required uint32 term = 1;
inline bool LogEntry::_internal_has_term() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LogEntry::has_term() const {
  return _internal_has_term();
}
inline void LogEntry::clear_term() {
  term_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LogEntry::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LogEntry::term() const {
  // @@protoc_insertion_point(field_get:LogEntry.term)
  return _internal_term();
}
inline void LogEntry::_internal_set_term(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  term_ = value;
}
inline void LogEntry::set_term(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:LogEntry.term)
}

// required uint32 index = 2;
inline bool LogEntry::_internal_has_index() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LogEntry::has_index() const {
  return _internal_has_index();
}
inline void LogEntry::clear_index() {
  index_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LogEntry::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LogEntry::index() const {
  // @@protoc_insertion_point(field_get:LogEntry.index)
  return _internal_index();
}
inline void LogEntry::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  index_ = value;
}
inline void LogEntry::set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:LogEntry.index)
}

// required bytes command = 3;
inline bool LogEntry::_internal_has_command() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LogEntry::has_command() const {
  return _internal_has_command();
}
inline void LogEntry::clear_command() {
  command_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LogEntry::command() const {
  // @@protoc_insertion_point(field_get:LogEntry.command)
  return _internal_command();
}
inline void LogEntry::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:LogEntry.command)
}
inline std::string* LogEntry::mutable_command() {
  // @@protoc_insertion_point(field_mutable:LogEntry.command)
  return _internal_mutable_command();
}
inline const std::string& LogEntry::_internal_command() const {
  return command_.Get();
}
inline void LogEntry::_internal_set_command(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LogEntry::set_command(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  command_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LogEntry.command)
}
inline void LogEntry::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LogEntry.command)
}
inline void LogEntry::set_command(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LogEntry.command)
}
inline std::string* LogEntry::_internal_mutable_command() {
  _has_bits_[0] |= 0x00000001u;
  return command_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LogEntry::release_command() {
  // @@protoc_insertion_point(field_release:LogEntry.command)
  if (!_internal_has_command()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return command_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogEntry::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LogEntry.command)
}

// -------------------------------------------------------------------

// AppendEntriesArgs

// required uint32 term = 1;
inline bool AppendEntriesArgs::_internal_has_term() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AppendEntriesArgs::has_term() const {
  return _internal_has_term();
}
inline void AppendEntriesArgs::clear_term() {
  term_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AppendEntriesArgs::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AppendEntriesArgs::term() const {
  // @@protoc_insertion_point(field_get:AppendEntriesArgs.term)
  return _internal_term();
}
inline void AppendEntriesArgs::_internal_set_term(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  term_ = value;
}
inline void AppendEntriesArgs::set_term(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:AppendEntriesArgs.term)
}

// required int32 leader_id = 2;
inline bool AppendEntriesArgs::_internal_has_leader_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AppendEntriesArgs::has_leader_id() const {
  return _internal_has_leader_id();
}
inline void AppendEntriesArgs::clear_leader_id() {
  leader_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppendEntriesArgs::_internal_leader_id() const {
  return leader_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppendEntriesArgs::leader_id() const {
  // @@protoc_insertion_point(field_get:AppendEntriesArgs.leader_id)
  return _internal_leader_id();
}
inline void AppendEntriesArgs::_internal_set_leader_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  leader_id_ = value;
}
inline void AppendEntriesArgs::set_leader_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_leader_id(value);
  // @@protoc_insertion_point(field_set:AppendEntriesArgs.leader_id)
}

// required uint32 prev_log_index = 3;
inline bool AppendEntriesArgs::_internal_has_prev_log_index() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AppendEntriesArgs::has_prev_log_index() const {
  return _internal_has_prev_log_index();
}
inline void AppendEntriesArgs::clear_prev_log_index() {
  prev_log_index_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AppendEntriesArgs::_internal_prev_log_index() const {
  return prev_log_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AppendEntriesArgs::prev_log_index() const {
  // @@protoc_insertion_point(field_get:AppendEntriesArgs.prev_log_index)
  return _internal_prev_log_index();
}
inline void AppendEntriesArgs::_internal_set_prev_log_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  prev_log_index_ = value;
}
inline void AppendEntriesArgs::set_prev_log_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_prev_log_index(value);
  // @@protoc_insertion_point(field_set:AppendEntriesArgs.prev_log_index)
}

// required uint32 prev_log_term = 4;
inline bool AppendEntriesArgs::_internal_has_prev_log_term() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AppendEntriesArgs::has_prev_log_term() const {
  return _internal_has_prev_log_term();
}
inline void AppendEntriesArgs::clear_prev_log_term() {
  prev_log_term_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AppendEntriesArgs::_internal_prev_log_term() const {
  return prev_log_term_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AppendEntriesArgs::prev_log_term() const {
  // @@protoc_insertion_point(field_get:AppendEntriesArgs.prev_log_term)
  return _internal_prev_log_term();
}
inline void AppendEntriesArgs::_internal_set_prev_log_term(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  prev_log_term_ = value;
}
inline void AppendEntriesArgs::set_prev_log_term(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_prev_log_term(value);
  // @@protoc_insertion_point(field_set:AppendEntriesArgs.prev_log_term)
}

// repeated .LogEntry entries = 5;
inline int AppendEntriesArgs::_internal_entries_size() const {
  return entries_.size();
}
inline int AppendEntriesArgs::entries_size() const {
  return _internal_entries_size();
}
inline void AppendEntriesArgs::clear_entries() {
  entries_.Clear();
}
inline ::LogEntry* AppendEntriesArgs::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:AppendEntriesArgs.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogEntry >*
AppendEntriesArgs::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:AppendEntriesArgs.entries)
  return &entries_;
}
inline const ::LogEntry& AppendEntriesArgs::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::LogEntry& AppendEntriesArgs::entries(int index) const {
  // @@protoc_insertion_point(field_get:AppendEntriesArgs.entries)
  return _internal_entries(index);
}
inline ::LogEntry* AppendEntriesArgs::_internal_add_entries() {
  return entries_.Add();
}
inline ::LogEntry* AppendEntriesArgs::add_entries() {
  // @@protoc_insertion_point(field_add:AppendEntriesArgs.entries)
  return _internal_add_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogEntry >&
AppendEntriesArgs::entries() const {
  // @@protoc_insertion_point(field_list:AppendEntriesArgs.entries)
  return entries_;
}

// required uint32 leader_commit = 6;
inline bool AppendEntriesArgs::_internal_has_leader_commit() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AppendEntriesArgs::has_leader_commit() const {
  return _internal_has_leader_commit();
}
inline void AppendEntriesArgs::clear_leader_commit() {
  leader_commit_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AppendEntriesArgs::_internal_leader_commit() const {
  return leader_commit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AppendEntriesArgs::leader_commit() const {
  // @@protoc_insertion_point(field_get:AppendEntriesArgs.leader_commit)
  return _internal_leader_commit();
}
inline void AppendEntriesArgs::_internal_set_leader_commit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  leader_commit_ = value;
}
inline void AppendEntriesArgs::set_leader_commit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_leader_commit(value);
  // @@protoc_insertion_point(field_set:AppendEntriesArgs.leader_commit)
}

// -------------------------------------------------------------------

// AppendEntriesReply

// required uint32 term = 1;
inline bool AppendEntriesReply::_internal_has_term() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AppendEntriesReply::has_term() const {
  return _internal_has_term();
}
inline void AppendEntriesReply::clear_term() {
  term_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AppendEntriesReply::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AppendEntriesReply::term() const {
  // @@protoc_insertion_point(field_get:AppendEntriesReply.term)
  return _internal_term();
}
inline void AppendEntriesReply::_internal_set_term(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  term_ = value;
}
inline void AppendEntriesReply::set_term(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:AppendEntriesReply.term)
}

// required bool success = 2;
inline bool AppendEntriesReply::_internal_has_success() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AppendEntriesReply::has_success() const {
  return _internal_has_success();
}
inline void AppendEntriesReply::clear_success() {
  success_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool AppendEntriesReply::_internal_success() const {
  return success_;
}
inline bool AppendEntriesReply::success() const {
  // @@protoc_insertion_point(field_get:AppendEntriesReply.success)
  return _internal_success();
}
inline void AppendEntriesReply::_internal_set_success(bool value) {
  _has_bits_[0] |= 0x00000002u;
  success_ = value;
}
inline void AppendEntriesReply::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:AppendEntriesReply.success)
}

// required uint32 conflict_index = 3;
inline bool AppendEntriesReply::_internal_has_conflict_index() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AppendEntriesReply::has_conflict_index() const {
  return _internal_has_conflict_index();
}
inline void AppendEntriesReply::clear_conflict_index() {
  conflict_index_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AppendEntriesReply::_internal_conflict_index() const {
  return conflict_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AppendEntriesReply::conflict_index() const {
  // @@protoc_insertion_point(field_get:AppendEntriesReply.conflict_index)
  return _internal_conflict_index();
}
inline void AppendEntriesReply::_internal_set_conflict_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  conflict_index_ = value;
}
inline void AppendEntriesReply::set_conflict_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_conflict_index(value);
  // @@protoc_insertion_point(field_set:AppendEntriesReply.conflict_index)
}

// required uint32 conflict_term = 4;
inline bool AppendEntriesReply::_internal_has_conflict_term() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AppendEntriesReply::has_conflict_term() const {
  return _internal_has_conflict_term();
}
inline void AppendEntriesReply::clear_conflict_term() {
  conflict_term_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AppendEntriesReply::_internal_conflict_term() const {
  return conflict_term_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AppendEntriesReply::conflict_term() const {
  // @@protoc_insertion_point(field_get:AppendEntriesReply.conflict_term)
  return _internal_conflict_term();
}
inline void AppendEntriesReply::_internal_set_conflict_term(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  conflict_term_ = value;
}
inline void AppendEntriesReply::set_conflict_term(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_conflict_term(value);
  // @@protoc_insertion_point(field_set:AppendEntriesReply.conflict_term)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_args_2eproto
